/*
 * Tenor GifAPI Client
 *
 * API client for https://tenor.com/gifapi/
 *
 * API version: 0.1
 * Contact: warren@warren-gray.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tenor

import (
	"encoding/json"
)

// MediaObject struct for MediaObject
type MediaObject struct {
	// a url to a preview image of the media source
	Preview string `json:"preview"`
	// a url to the media source
	Url string `json:"url"`
	// width and height in pixels
	Dims []int32 `json:"dims"`
	// size of file in bytes
	Size int32 `json:"size"`
}

// NewMediaObject instantiates a new MediaObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaObject(preview string, url string, dims []int32, size int32) *MediaObject {
	this := MediaObject{}
	this.Preview = preview
	this.Url = url
	this.Dims = dims
	this.Size = size
	return &this
}

// NewMediaObjectWithDefaults instantiates a new MediaObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaObjectWithDefaults() *MediaObject {
	this := MediaObject{}
	return &this
}

// GetPreview returns the Preview field value
func (o *MediaObject) GetPreview() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value
// and a boolean to check if the value has been set.
func (o *MediaObject) GetPreviewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preview, true
}

// SetPreview sets field value
func (o *MediaObject) SetPreview(v string) {
	o.Preview = v
}

// GetUrl returns the Url field value
func (o *MediaObject) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *MediaObject) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *MediaObject) SetUrl(v string) {
	o.Url = v
}

// GetDims returns the Dims field value
func (o *MediaObject) GetDims() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Dims
}

// GetDimsOk returns a tuple with the Dims field value
// and a boolean to check if the value has been set.
func (o *MediaObject) GetDimsOk() (*[]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dims, true
}

// SetDims sets field value
func (o *MediaObject) SetDims(v []int32) {
	o.Dims = v
}

// GetSize returns the Size field value
func (o *MediaObject) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *MediaObject) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *MediaObject) SetSize(v int32) {
	o.Size = v
}

func (o MediaObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["preview"] = o.Preview
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["dims"] = o.Dims
	}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableMediaObject struct {
	value *MediaObject
	isSet bool
}

func (v NullableMediaObject) Get() *MediaObject {
	return v.value
}

func (v *NullableMediaObject) Set(val *MediaObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaObject(val *MediaObject) *NullableMediaObject {
	return &NullableMediaObject{value: val, isSet: true}
}

func (v NullableMediaObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
